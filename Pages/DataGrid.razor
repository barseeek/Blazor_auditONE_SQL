@page "/datagrid"

@using Blazor_auditONE_SQL.Models
@using Blazor_auditONE_SQL.Data
@using Microsoft.Extensions.Configuration
@using System.Net.Mail
@using System.IO
@using System.Text
@using Microsoft.Extensions.Logging
@inject PhotoModelService photoService
@inject UserModelService userService
@inject IConfiguration _config
@inject DialogService DialogService
@inject NavigationManager NavigationManager
@inject NotificationService notificationService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject Microsoft.AspNetCore.Hosting.IWebHostEnvironment env
@inject ILogger<DataGrid> Logger
<h1>Инциденты</h1>

<style>
    .whitespace {
        white-space: normal;
    }

    .rz-unselectable-text {
        white-space: normal !important;
    }

    .rzi-grid-sort {
    }

    .rz-grid-filter-icon {
        position: absolute;
        right: 0;
    }

    .rz-column-title {
        padding-right: 5px;
    }

    .btn-primary:disabled {
        background-color: #585858;
    }

    .rz-multiselect, .rz-dropdown {
        display: block;
    }
</style>
<AuthorizeView>
    @if (users != null && photos != null)
    {


        if (users.Where(x => x.login_mm == context.User.Identity.Name.ToLower()).First().permissions == "Administrator")
        {
            <div>
                <RadzenCheckBox @bind-Value=@check_incidents TValue="bool" Name="CheckBox" Change=@(args => ClosedIncidents(args))></RadzenCheckBox>
                <RadzenLabel Text="Показать завершенные инциденты" Component="CheckBox" Style="margin-left: 5px;" />
                <br />
                @*<RadzenCheckBox  @bind-Value=@check_incidents_2 TValue="bool" Name="CheckBox2" Change=@(args => ToCloseIncidents(args)) ></RadzenCheckBox>
                    <RadzenLabel Text="Показать инциденты на проверку" Component="CheckBox2" Style="margin-left: 5px;" />
                    <br />*@
                <RadzenButton ButtonType="ButtonType.Submit" Size="ButtonSize.Medium" Click="@(() => SendEmail())" Text="Отправить e-mail уведомления" Style="margin-bottom:20px" />
                <RadzenButton ButtonType="ButtonType.Submit" Size="ButtonSize.Medium" Click="@(() => SendIncidents())" Text="Отправить все инциденты в работу" Style="margin-bottom:20px" />
                <br />
            </div>
            //check_incidents? photos.Where(x => x.status == 4) : photos.Where(x => x.status == 1 || x.status == 3)
            <RadzenDataGrid @ref="@grid" Data="@(check_incidents? photos.Where(x => x.status == 4) : photos.Where(x => x.status == 1 || x.status == 3))" AllowColumnResize="true" AllowPaging="true" PageSize="10" AllowSorting="true" AllowFiltering="true" EditMode="DataGridEditMode.Single" TItem="PhotoModel" CellRender="@(args => CellRender(args))" Style="white-space:normal;">
                <Columns>
                    <RadzenDataGridColumn CssClass="hui" TItem="PhotoModel" Property="id" Title="ID" Sortable="true" Width="50px" Filterable="false" TextAlign="TextAlign.Center" />

                    <RadzenDataGridColumn TItem="PhotoModel" Property="user_firstname" Title="Имя" Sortable="true" Width="110px" Filterable="false" />

                    <RadzenDataGridColumn TItem="PhotoModel" Property="user_lastname" Title="Фамилия" Sortable="true" Width="130px" Filterable="true" />

                    @*<RadzenDataGridColumn TItem="PhotoModel" Property="file_id"        Title="ID файла"             Sortable="true"  Width="Auto" />*@
                    <RadzenDataGridColumn TItem="PhotoModel" Property="file_data" Title="Превью" Sortable="false" Width="150px" Filterable="false">
                        <Template Context="data">
                            <RadzenImage Path="@String.Format("data:image;base64,{0}", Convert.ToBase64String(data.file_data))" Click="@(() => OnClickImage(data.id, data.file_data))"
                                         Style="display: block; margin-left: auto; margin-right: auto;  width: 70%; max-height: 200px; max-width: 200px " class="mouse_over" />
                        </Template>
                    </RadzenDataGridColumn>
                    @*<RadzenDataGridColumn TItem="PhotoModel" Title="Фотография" Sortable="false" Width="150px" Filterable="false">
                            <Template Context="data">
                                <RadzenButton ButtonStyle="ButtonStyle.Info" Click=@(() => OnClick(data.id, data.file_data)) Text="Full-size" />
                            </Template>
                        </RadzenDataGridColumn>*@

                    <RadzenDataGridColumn TItem="PhotoModel" Property="description" Title="Описание" Sortable="false" Width="Auto" Filterable="true">
                        <Template Context="data">
                            <p style="white-space:normal">@data.description</p>
                            <RadzenButton Icon="edit" Size="ButtonSize.Small" Click="@(args => EditRow(data))" @onclick:stopPropagation="true" Disabled="@disable_edits[data.id-1]" Style="display:block; margin:auto;" />
                        </Template>
                        <EditTemplate Context="data">
                            <RadzenTextArea @bind-Value="data.description" Style="width:100%; display: block" Name="description" />
                            <RadzenRequiredValidator Text="Description is required" Component="description" Popup="true" />
                            <RadzenButton Icon="save" Size="ButtonSize.Small" Click="@((args) => SaveRow(data))">
                            </RadzenButton>
                            <RadzenButton Icon="cancel" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Secondary" Click="@((args) => CancelEdit(data))">
                            </RadzenButton>
                        </EditTemplate>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="PhotoModel" Property="place" Title="Место" Sortable="false" Width="Auto" Filterable="false">
                        <Template Context="data">
                            <p style="white-space:normal">@data.place</p>
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="PhotoModel" Property="zone" Title="Зона" Sortable="false" Width="180px" Filterable="false">
                        <Template Context="data">
                            <div style="text-align:center;margin-left:auto;margin-right:auto;display:block;">
                                <p style="white-space:normal">@data.zone</p>
                                <RadzenButton ButtonType="ButtonType.Submit" Size="ButtonSize.Small" Click="@(() => OnClickZones(data.id))" Text="Выбрать зону" Disabled="@disable_zone[data.id-1]" />
                            </div>
                            @*<RadzenDropDown TValue="string" Data="@zone_values" @bind-Value="@data.zone" Disabled="disable_zone[data.id - 1]" AllowFiltering="true" />*@
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="PhotoModel" Property="date" Title="Дата загрузки" Sortable="true" Width="90px" Filterable="true">
                        <Template Context="data">
                            <p style="white-space:normal">@data.date.ToShortDateString()</p>
                        </Template>
                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn TItem="PhotoModel" Property="departments" Title="Выбрать группы" Sortable="false" Width="130px" Filterable="false">
                        <Template Context="data">
                            <RadzenButton ButtonType="ButtonType.Submit" Size="ButtonSize.Small" Click="@(() => OnClickDepartments(data.id, data.departments))" Text="Выбрать группы" Disabled="@disable_groups[data.id-1]" />
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="PhotoModel" Title="Группы">
                        <Template Context="data">
                            <p style="white-space:normal">@departments_string[data.id - 1]</p>
                        </Template>
                    </RadzenDataGridColumn>
                    @*<RadzenDataGridColumn TItem="PhotoModel" Title="Отправить письмо">
                            <Template Context="data">
                                <RadzenButton ButtonType="ButtonType.Submit" Click="@(() => SendEmail(data.departments))" Text="Отправить письмо" Disabled="disable_sendmail[data.id - 1]" />
                            </Template>
                        </RadzenDataGridColumn>*@

                    @*<RadzenDataGridColumn TItem="PhotoModel" Property="status" Title="Статус" Sortable="true" Width="100px" Filterable="true" />*@

                    @*<RadzenDataGridColumn TItem="PhotoModel" Title="Изменить инцидент" Sortable="false" Filterable="false" Width="90px">
                            <Template Context="data">
                                <RadzenButton Icon="edit" Size="ButtonSize.Small" Click="@(args => EditRow(data))" @onclick:stopPropagation="true" Disabled="@disable_edits[data.id-1]" Style="display:block; margin:auto;" />
                            </Template>
                            <EditTemplate Context="data">
                                <div style="display:block; margin:auto;">
                                    <RadzenButton Icon="save" Size="ButtonSize.Small" Click="@((args) => SaveRow(data))">
                                    </RadzenButton>
                                    <RadzenButton Icon="cancel" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Secondary" Click="@((args) => CancelEdit(data))">
                                    </RadzenButton>
                                </div>
                            </EditTemplate>
                        </RadzenDataGridColumn>*@

                    <RadzenDataGridColumn TItem="PhotoModel" Title="Переслать" Sortable="false" Filterable="false" Width="170px">
                        <Template Context="data">
                            @switch (data.status)
                            {

                                case 1:
                                    {
                                        button_text = "Отправить в работу";
                                        break;
                                    }
                                case 2:
                                    {
                                        button_text = "Инцидент в работе";
                                        break;
                                    }
                                case 3:
                                    {
                                        button_text = "Завершить инцидент";
                                        break;
                                    }
                                case 4:
                                    {
                                        button_text = "Инцидент выполнен";
                                        break;
                                    }
                            }
                            <RadzenButton Icon="build" Text="@button_text" Size="ButtonSize.Small" Click="@((args) => ChangeIncidentStatus(data))" Disabled="disable_send_incident[data.id - 1]" />

                        </Template>
                    </RadzenDataGridColumn>

                    @*<RadzenDataGridColumn TItem="PhotoModel" Property="comment" Title="Комментарий" Sortable="false" Filterable="false">
                            <Template Context="data">
                                <div class="textarea">
                                    <RadzenTextArea @bind-Value=@data.comment Cols="25" Rows="5" Disabled="true" />
                                </div>
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="PhotoModel" Property="comment_data" Title="Превью" Sortable="false" Width="150px" Filterable="false">
                            <Template Context="data">
                                <RadzenImage Path="@String.Format("data:image;base64,{0}", Convert.ToBase64String(data.comment_data))" Click="@(() => OnClickImage(data.id, data.comment_data))"
                                             Style="display: block; margin-left: auto; margin-right: auto;  width: 70%; max-height: 200px; max-width: 200px " class="mouse_over" />
                            </Template>
                        </RadzenDataGridColumn>*@
                </Columns>
            </RadzenDataGrid>
        }
        else
        {

            <RadzenDataGrid @ref="@grid" Data="@photos_worker" AllowColumnResize="true" AllowPaging="true" PageSize="10" AllowSorting="true" AllowFiltering="true" EditMode="DataGridEditMode.Single" TItem="PhotoModel" CellRender="@(args => CellRender(args))" Style="white-space:normal">
                <Columns>

                    <RadzenDataGridColumn TItem="PhotoModel" Property="id" Title="ID" Sortable="true" Filterable="false" TextAlign="TextAlign.Center" Width="50px" />
                    <RadzenDataGridColumn TItem="PhotoModel" Property="user_firstname" Title="Имя" Sortable="false" Filterable="false" Width="100px" />
                    <RadzenDataGridColumn TItem="PhotoModel" Property="user_lastname" Title="Фамилия" Sortable="true" Filterable="true" Width="100px" />
                    <RadzenDataGridColumn TItem="PhotoModel" Property="file_data" Title="Превью" Sortable="false" Filterable="false" Width="100px">
                        <Template Context="data">
                            <RadzenImage Path="@String.Format("data:image;base64,{0}", Convert.ToBase64String(data.file_data))" Click="@(() => OnClickImage(data.id, data.file_data))"
                                         Style="display: block; margin-left: auto; margin-right: auto;  width: 70%; max-height: 200px; max-width: 200px " class="mouse_over" />
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="PhotoModel" Property="description" Title="Описание" Sortable="false" Filterable="false" Width="150px">
                        <Template Context="data">
                            <p style="white-space:normal">@data.description</p>
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="PhotoModel" Property="place" Title="Место" Sortable="false" Filterable="false" Width="150px">
                        <Template Context="data">
                            <p style="white-space:normal">@data.place</p>
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="PhotoModel" Property="zone" Title="Зона" Sortable="false" Filterable="false" Width="100px">
                        <Template Context="data">
                            <p style="white-space:normal; text-align:center">@data.zone</p>
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="PhotoModel" Property="date" Title="Дата загрузки" Sortable="true" Filterable="true" Width="90px">
                        <Template Context="data">
                            <p style="white-space:normal">@data.date.ToShortDateString()</p>
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="PhotoModel" Title="Комментарий" Property="comment" Width="400px" Filterable="false" Sortable="false">
                        <Template Context="data">
                            <div class="textarea">
                                <RadzenTextArea @bind-Value=@current_comment[data.id - 1] Cols="25" Rows="2" Style="display:grid" Placeholder="Введите комментарий" />
                                <br />
                                <p>Лог комментариев:</p>
                                <RadzenTextArea @bind-Value=@data.comment Cols="25" Rows="5" Disabled="true" Style="display:grid" />
                            </div>
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="PhotoModel" Title="Загрузить фото" Width="195px" Filterable="false" Sortable="false">
                        <Template Context="data">
                            <div class="btn-light input-group-prepend" style="font-size:0.75rem">
                                <InputFile OnChange="@(args => LoadFiles(args, data))" />
                            </div>
                            <br />
                            @if (data.comment_data != null && !data.comment_data.SequenceEqual(new byte[0]))
                            {
                                <div><RadzenImage Path="@GetBase64(data.comment_data)" Style="display: block; margin-left: auto; margin-right: auto;  width: 70%; max-height: 200px; max-width: 200px " /></div>
                            }
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="PhotoModel" Title="" Filterable="false" Sortable="false" Width="50px">
                        <Template Context="data">
                            <RadzenButton Icon="save" Size="ButtonSize.Medium" Click="@((args) => IsIncidentDone(data))" />

                        </Template>
                    </RadzenDataGridColumn>
                    @*<RadzenDataGridColumn TItem="PhotoModel" Title="Отправить письмо">
                            <Template Context="data">
                                <RadzenButton ButtonType="ButtonType.Submit" Click="@(() => SendEmail(data.departments))" Text="Отправить письмо" Disabled="disable_sendmail[data.id - 1]" />
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="PhotoModel" Title="Изменить инцидент">
                            <Template Context="data">
                                <RadzenButton Icon="edit" Size="ButtonSize.Small" Click="@(args => EditRow(data))" @onclick:stopPropagation="true" />
                            </Template>
                            <EditTemplate Context="data">
                                <RadzenButton Icon="save" Size="ButtonSize.Small" Click="@((args) => SaveRow(data))">
                                </RadzenButton>
                                <RadzenButton Icon="cancel" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Secondary" Click="@((args) => CancelEdit(data))">
                                </RadzenButton>
                            </EditTemplate>
                        </RadzenDataGridColumn>*@

                </Columns>
            </RadzenDataGrid>

        }
    }
    else
    {
        <p>Loading...</p>
    }
</AuthorizeView>


@code {
    RadzenDataGrid<PhotoModel> grid;
    List<PhotoModel> photos; // grid's strings (Photo_from_tg)
    List<PhotoModel> photos_worker; // grid's strings for worker(Photo_from_tg)
    List<UserModel> users; // users from sql table (Users_from_tg)
                           //List<List<DepartmentModel>> photos_departments; // lists of departments for every photo
    List<UserDepartmentModel> users_deps = new List<UserDepartmentModel>(); // users from every dep from sql table
    List<int> selected_dep_names; //
    List<bool> disable_zone; //disabled dropdowns for zone
    List<bool> disable_send_incident;
    List<bool> disable_groups;
    List<bool> disable_edits;
    List<string> departments_string; // string of selected departments
    List<string> current_comment;
    IEnumerable<string> departments_IEnum; //list of selected departments
    IEnumerable<string> dep_user_lastnames;
    private string Message_sent { get; set; } = "";
    PhotoModel data_edit;
    string users_head_id;
    string button_text = "Отправить в работу";
    IEnumerable<string> zaloopa;
    IEnumerable<int> huy;
    IEnumerable<int> huyhuy;
    IEnumerable<string> huyhuyhuy;
    UserModel current_user;
    string current_zone;
    bool check_incidents = false;
    bool check_incidents_2 = false;
    bool visible_comment = false;

    protected override async Task OnInitializedAsync()
    {
        departments_string = new List<string>();
        photos_worker = new List<PhotoModel>();
        disable_zone = new List<bool>();
        disable_send_incident = new List<bool>();
        disable_edits = new List<bool>();
        disable_groups = new List<bool>();
        current_comment = new List<string>();
        users = await Task.Run(() => userService.GetUsersDropDownAsync());
        photos = await Task.Run(() => photoService.GetPhotosAsync());
        users_deps = await Task.Run(() => userService.GetUsersDepartmentsAsync());
        current_user = users.Where(x => x.login_mm == AuthenticationStateProvider.GetAuthenticationStateAsync().Result.User.Identity.Name.ToLower()).Select(x => new UserModel { id = x.id, firstname = x.firstname, lastname = x.lastname, head_id = x.head_id }).First(); //head id of current user

        foreach (PhotoModel photo in photos)
        {
            //if (current_user.head_id != null && current_user.head_id != "") //hz che
            //{
            //    users_head_id_lastname = users.Where(x => x.id == Convert.ToInt32(current_user.head_id)).First().lastname; // lastname of head's id of current user
            //}
            huy = from a in photo.departments where a.isChecked == true select a.id; // ienum checked deps for every photo
            huyhuy = from a in huy from u in users_deps where a == u.department_id && current_user.id == u.user_id select u.user_id; // ienum workers id for every photo
            huyhuyhuy = from a in users where photo.user_lastname == a.lastname select a.head_id; // head
            if (/*(photo.user_lastname == users_head_id_lastname || current_user.head_id == huyhuyhuy.ElementAt(0)) && */huyhuy.Count() == 1 && photo.status == 2) //статус "в работе" + загружена начальником юзера + юзеру назначен инцидент
                photos_worker.Add(photo);

            //photos_departments.Add(await Task.Run(() => userService.GetDepartmentsAsync()));
            departments_string.Add("");
            current_comment.Add("");
            zaloopa = photo.departments.Where(s => s.isChecked == true).Select(s => s.department);
            departments_string[photo.id - 1] = String.Join(", ", zaloopa);


            switch (photo.status)
            {
                case 1:
                    disable_send_incident.Add(false);
                    disable_groups.Add(false);
                    disable_edits.Add(false);
                    disable_zone.Add(false);
                    break;
                case 2:
                    disable_send_incident.Add(true);
                    disable_groups.Add(true);
                    disable_edits.Add(true);
                    disable_zone.Add(true);
                    break;
                case 3:
                    disable_send_incident.Add(false);
                    disable_groups.Add(true);
                    disable_edits.Add(true);
                    disable_zone.Add(true);
                    break;
                case 4:
                    disable_send_incident.Add(true);
                    disable_groups.Add(true);
                    disable_edits.Add(true);
                    disable_zone.Add(true);
                    break;
                default:
                    throw new ArgumentOutOfRangeException();
            }

        }
        //photos = photos.Where(x => x.status < 4).OrderBy(x => x.status).ToList();


    }

    async Task OnClickImage(int id, byte[] file_data)
    {
        await DialogService.OpenAsync<DialogPhoto>($"Фотография {id}",
           new Dictionary<string, object>() { { "id", id }, { "file_data", file_data } },
          new DialogOptions() { CloseDialogOnOverlayClick = true });
    }

    async Task OnClickDepartments(int id, List<DepartmentModel> deps)
    {
        GC.Collect();
        List<int> deps_edit = new List<int>();
        departments_IEnum = null;

        deps_edit = deps.Where(x => x.isChecked == true).Select(x => x.id).ToList();
        dynamic selected_deps = await DialogService.OpenAsync<DialogDepartment>($"Choose department",
           new Dictionary<string, object>() { { "id", id }, { "deps", deps } },
           new DialogOptions() { Width = "1000px", Height = "800px", Resizable = true, Draggable = true });
        if (selected_deps == null || selected_deps.Count == 0)
        {
            selected_dep_names = (List<int>)selected_deps;
            departments_IEnum = from a in deps_edit from u in deps where a == u.id select u.department;
            departments_string[id - 1] = String.Join(", ", departments_IEnum.ToArray());
        }
        else
        {
            selected_dep_names = (List<int>)selected_deps;
            departments_IEnum = from a in selected_dep_names from u in deps where a == u.id select u.department;
            departments_string[id - 1] = String.Join(", ", departments_IEnum.ToArray());
        }
        SaveDepartments(id, deps);
        grid.Reset(true);
        await InvokeAsync(StateHasChanged);
    }

    async Task OnClickZones(int id)
    {
        dynamic zone = await DialogService.OpenAsync<DialogZone>("Выберите зону",
            new Dictionary<string, object>() { { "id", id } },
            new DialogOptions() { Width = "985px", Height = "985px", Resizable = true, Draggable = true });
        if (zone != null || zone != "")
        {
            string sqlQueryData = $"UPDATE dbo.Photo_from_tg SET zone='{zone}' WHERE id = {id}";
            string result = await Task.Run(() => photoService.SaveDataAsync(sqlQueryData));
            if (result == "OK")
            {
                notificationService.Notify(new NotificationMessage() { Severity = NotificationSeverity.Success, Summary = "Success", Detail = "Сохранение успешно завершено", Duration = 2000 });
                foreach (PhotoModel photo in photos.Where(x => x.id == id))
                {
                    photo.zone = zone;
                }
                await InvokeAsync(StateHasChanged);
                await grid.Reload();
            }
            else
            {
                notificationService.Notify(new NotificationMessage() { Severity = NotificationSeverity.Error, Summary = "Error", Detail = result, Duration = 2000 }); //huy pizda dzhigurda
            }
        }
        else
            notificationService.Notify(new NotificationMessage() { Severity = NotificationSeverity.Error, Summary = "Error", Detail = "Зона не выбрана!", Duration = 2000 }); //huy pizda dzhigurda

    }

    async void SendEmail()
    {
        List<string> blablabla = new List<string>();
        IEnumerable<int> helppls;
        IEnumerable<int> heelp;
        List<PhotosDepsModel> photos_deps = new List<PhotosDepsModel>();
        int i = 0;
        string end_line;
        photos_deps = await Task.Run(() => photoService.GetPhotosDepsAsync());
        if (photos_deps.Count() == 0)
        {
            notificationService.Notify(new NotificationMessage() { Severity = NotificationSeverity.Error, Summary = "Error", Detail = "Выберите группы!", Duration = 4000 });
            return;
        }
        else
        {
            heelp = from a in photos from p in photos_deps where p.photo_id == a.id && a.status == 2 select p.photo_checked_dep;
            helppls = from p in heelp from u in users_deps where p == u.department_id select u.user_id; // users with incidents
            int[] counter = new int[helppls.Distinct().Count()];

            blablabla = (from a in helppls from u in users where a == u.id select u.mail).Distinct().ToList();
            foreach (int user in helppls.Distinct())
            {
                counter[i] = helppls.Where(x => x == user).Count();
                try
                {
                    using (MailMessage message = new MailMessage())
                    {
                        message.From = new MailAddress("mmpofAudit@mm.group");
                        //message.To.Add("Sergey.Shiryaev@mm.group");
                        //message.To.Add("Nikita.Barskiy@mm.group");
                        //foreach (string email in blablabla)
                        //    message.To.Add(email);
                        message.To.Add(blablabla.ElementAt(i));
                        message.Subject = "Тестирование работы AuditONE! Не отвечайте на это сообщение";
                        message.Body = $"В AuditONE у вас имееются незавершенные инциденты!" + Environment.NewLine + $"Количество инцидентов: {counter[i]}" + Environment.NewLine + "Для просмотра инцидентов авторизуйтесь в AuditONE." + Environment.NewLine;
                        using (SmtpClient smtp = new SmtpClient("smtphub.mm-karton.com", 25))
                        {
                            smtp.Credentials = new System.Net.NetworkCredential("mmpofAudit@mm.group", ""); //from
                            smtp.EnableSsl = false;
                            smtp.Send(message);
                            Message_sent = "done!";
                        }
                    }
                }
                catch (Exception ex)
                {
                    Message_sent = ex.Message;
                    notificationService.Notify(new NotificationMessage() { Severity = NotificationSeverity.Error, Summary = "Error", Detail = $"Сообщение пользователю {blablabla.ElementAt(i)} не отправлено! Обратитесь к администратору", Duration = 4000 });
                }
                i++;
            }
        }

        // ****************************************************************
        //FOR PROD NOT FOR TEST KUSOK DER'MA OPYAT' OTPRAVISH HUYNYUU

        //bla = from a in selected_dep_names from u in users_deps where a == u.department_id select u.user_id;
        //blabla = from a in bla from u in users where a == u.id select u.mail;
        //blablabla = blabla.ToList();
        // ****************************************************************
        //FOR TEST



        //blablabla.Add("Sergey.Shiryaev@mm.group");
        //blablabla.Add("Nikita.Barskiy@mm.group");

        //    try
        //    {
        //        using (MailMessage message = new MailMessage())
        //        {
        //            message.From = new MailAddress("mmpofAudit@mm.group");
        //            //message.To.Add("Sergey.Shiryaev@mm.group");
        //            //message.To.Add("Nikita.Barskiy@mm.group");
        //            foreach (string email in blablabla)
        //                message.To.Add(email);
        //            message.Subject = "";
        //            message.Body = "";
        //            using (SmtpClient smtp = new SmtpClient("smtphub.mm-karton.com", 25))
        //            {
        //                smtp.Credentials = new System.Net.NetworkCredential("mmpofAudit@mm.group", ""); //from
        //                smtp.EnableSsl = false;
        //                smtp.Send(message);
        //                Message_sent = "done!";
        //            }
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        Message_sent = ex.Message;
        //    }
    }

    void Change(object value, int id)
    {
        photos.FirstOrDefault(d => d.id == id).user_firstname = Convert.ToString(value);
    }

    async void EditRow(PhotoModel data)
    {
        //disable_zone[data.id - 1] = false;
        disable_send_incident[data.id - 1] = true;
        await grid.EditRow(data);
    }

    async void SaveRow(PhotoModel data)
    {
        if (data.description != ""/* && data.zone != null && data.zone != ""*/)
        {
            string sqlQueryData = $"UPDATE dbo.Photo_from_tg SET description='{data.description}', zone='{data.zone}' WHERE id = {data.id}";
            string result = await Task.Run(() => photoService.SaveDataAsync(sqlQueryData));
            if (result == "OK")
            {
                notificationService.Notify(new NotificationMessage() { Severity = NotificationSeverity.Success, Summary = "Success", Detail = "Сохранение успешно завершено", Duration = 4000 });
            }
            else
            {
                notificationService.Notify(new NotificationMessage() { Severity = NotificationSeverity.Error, Summary = "Error", Detail = result, Duration = 10000 }); //huy pizda dzhigurda
            }
            //disable_zone[data.id - 1] = true;
            disable_send_incident[data.id - 1] = false;
            await InvokeAsync(StateHasChanged);
            await grid.UpdateRow(data);
        }
        else
            notificationService.Notify(new NotificationMessage() { Severity = NotificationSeverity.Error, Summary = "Error", Detail = "Заполните пустые поля!", Duration = 4000 });
    }

    async void CancelEdit(PhotoModel data)
    {
        data_edit = photoService.GetPhotoAsync(data.id);
        data_edit.departments = data.departments;
        //data_edit.departments = ;
        //photos.FirstOrDefault(x => x.id == data.id).departments = data_edit.departments;

        zaloopa = data.departments.Where(s => s.isChecked == true).Select(s => s.department);
        photos.FirstOrDefault(x => x.id == data.id).description = data_edit.description;
        //photos.FirstOrDefault(x => x.id == data.id).zone = data_edit.zone;
        photos.FirstOrDefault(x => x.id == data.id).status = data_edit.status;
        //disable_zone[data.id - 1] = true;
        disable_send_incident[data.id - 1] = false;
        grid.CancelEditRow(data);
        await InvokeAsync(StateHasChanged);
        await grid.Reload();
    }

    void CellRender(DataGridCellRenderEventArgs<PhotoModel> args)
    {
        if (args.Column.Property == "id")
        {
            switch (args.Data.status)
            {
                case 1: args.Attributes.Add("style", "background-color: #b3b3b3"); break;
                case 2: args.Attributes.Add("style", "background-color: #ebe242"); break;
                case 3: args.Attributes.Add("style", "background-color: #fc9d30"); break;
                case 4: args.Attributes.Add("style", "background-color: #bfff59"); break;

                default: args.Attributes.Add("style", "background-color: #ffffff"); break;
            }
        }
    }


    async void IsIncidentDone(PhotoModel incident)
    {

        if (current_comment[incident.id - 1] != "" && current_comment[incident.id - 1] != null && incident.comment_data.Length > 0)
        {
            foreach (PhotoModel photo in photos.Where(x => x.id == incident.id))
            {
                photo.status = 3;
                ChangeDisable(incident);
                photo.comment = Environment.NewLine + "[ " + DateTime.Now + " ] " + current_user.firstname + " " + current_user.lastname + " оставил комментарий: " + current_comment[incident.id - 1] + Environment.NewLine + photo.comment;
                string sqlQueryData = $"UPDATE dbo.Photo_from_tg SET status='{photo.status}', comment='{photo.comment}', comment_data=@image_data WHERE id = {photo.id}";
                string result = await Task.Run(() => photoService.SaveDataAsync(sqlQueryData, photo.comment_data));
                if (result == "OK") //update status
                    notificationService.Notify(new NotificationMessage() { Severity = NotificationSeverity.Success, Summary = "Success", Detail = "Инцидент отправлен на проверку", Duration = 4000 });
                else
                    notificationService.Notify(new NotificationMessage() { Severity = NotificationSeverity.Error, Summary = "Error", Detail = "Статус не обновлен", Duration = 4000 }); //
            }
        }
        else
        {
            notificationService.Notify(new NotificationMessage() { Severity = NotificationSeverity.Error, Summary = "Error", Detail = "Введите комментарий и загрузите фото!", Duration = 4000 }); //huy pizda dzhigurda
        }
        await InvokeAsync(StateHasChanged);
        await grid.Reload();
    }

    async void ChangeIncidentStatus(PhotoModel incident)
    {
        IEnumerable<int> workers;
        IEnumerable<int> selected_deps;
        int old_status;
        string old_comment;
        old_status = incident.status;
        old_comment = incident.comment;
        switch (incident.status)
        {
            case 1:
                {
                    if (departments_string[incident.id - 1] != "" && photos[incident.id - 1].zone != "" && photos[incident.id - 1].zone != null)
                    {
                        photos[incident.id - 1].status = 2;
                        ChangeDisable(incident);
                        string sqlQueryData = $"UPDATE dbo.Photo_from_tg SET status='{incident.status}', zone='{incident.zone}' WHERE id = {incident.id}";
                        string result = await Task.Run(() => photoService.SaveDataAsync(sqlQueryData));
                        selected_deps = from a in incident.departments where a.isChecked == true select a.id;
                        workers = from a in selected_deps from u in users_deps where a == u.department_id select u.user_id;
                        if (result == "OK") //update status
                            notificationService.Notify(new NotificationMessage() { Severity = NotificationSeverity.Success, Summary = "Success", Detail = "Инцидент отправлен", Duration = 4000 });
                        else
                        {
                            photos[incident.id - 1].status = old_status;
                            notificationService.Notify(new NotificationMessage() { Severity = NotificationSeverity.Error, Summary = "Error", Detail = "Статус не обновлен", Duration = 4000 }); //
                        }
                    }
                    else
                    {
                        notificationService.Notify(new NotificationMessage() { Severity = NotificationSeverity.Error, Summary = "Error", Detail = "Заполните пустые поля!", Duration = 4000 }); //huy pizda dzhigurda
                    }
                    break;
                }
            case 3:
                {
                    dynamic finish_incident = await DialogService.OpenAsync<DialogFinishIncident>($"Завершить инцидент №{incident.id}?",
new Dictionary<string, object>() { { "incident", incident }, { "current_user", current_user } },
new DialogOptions() { Width = "1300px", Height = "900px", Resizable = true, Draggable = true });
                    if (finish_incident is bool)
                    {
                        photos[incident.id - 1].status = 4;
                        ChangeDisable(incident);
                        photos[incident.id - 1].comment = "[ " + DateTime.Now + " ] " + current_user.firstname + " " + current_user.lastname + " завершил инцидент!" + Environment.NewLine + photos[incident.id - 1].comment;
                        string sqlQueryData = $"UPDATE dbo.Photo_from_tg SET status='{photos[incident.id - 1].status}', comment='{photos[incident.id - 1].comment}' WHERE id = {incident.id}";
                        string result = await Task.Run(() => photoService.SaveDataAsync(sqlQueryData));
                        if (result == "OK") //update status
                            notificationService.Notify(new NotificationMessage() { Severity = NotificationSeverity.Success, Summary = "Success", Detail = "Статус обновлен", Duration = 4000 });
                        else
                        {
                            photos[incident.id - 1].status = old_status;
                            photos[incident.id - 1].comment = old_comment;
                            notificationService.Notify(new NotificationMessage() { Severity = NotificationSeverity.Error, Summary = "Error", Detail = "Статус не обновлен", Duration = 4000 });
                        }
                    }
                    else if (finish_incident is PhotoModel)
                    {
                        photos[incident.id - 1].status = 2;
                        ChangeDisable(incident);
                        photos[incident.id - 1].comment = finish_incident.comment;
                        string sqlQueryData = $"UPDATE dbo.Photo_from_tg SET status='{photos[incident.id - 1].status}', comment='{photos[incident.id - 1].comment}' WHERE id = {incident.id}";
                        string result = await Task.Run(() => photoService.SaveDataAsync(sqlQueryData));
                        if (result == "OK") //update status
                            notificationService.Notify(new NotificationMessage() { Severity = NotificationSeverity.Success, Summary = "Success", Detail = "Статус обновлен", Duration = 4000 });
                        else
                        {
                            photos[incident.id - 1].status = old_status;
                            photos[incident.id - 1].comment = old_comment;
                            notificationService.Notify(new NotificationMessage() { Severity = NotificationSeverity.Error, Summary = "Error", Detail = "Статус не обновлен", Duration = 4000 });
                        }
                    }
                    else if (finish_incident == null)
                    {
                        photos[incident.id - 1].status = 3;
                        break;
                    }
                    break;

                }
        }
        await InvokeAsync(StateHasChanged);
        grid.Reset(true);
    }


    async void SaveDepartments(int id, List<DepartmentModel> deps)
    {
        IEnumerable<int> selected_deps;
        string sqlQueryData = $"DELETE FROM dbo.Photos_Departments WHERE photo_id = {id}";
        string result = await Task.Run(() => photoService.SaveDataAsync(sqlQueryData));
        if (result == "OK")
        {
            notificationService.Notify(new NotificationMessage() { Severity = NotificationSeverity.Success, Summary = "Success", Detail = "Удаление успешно завершено", Duration = 4000 });
        }
        else
        {
            notificationService.Notify(new NotificationMessage() { Severity = NotificationSeverity.Error, Summary = "Error", Detail = result, Duration = 10000 }); //huy pizda dzhigurda
        }
        selected_deps = from a in deps where a.isChecked == true select a.id;
        if (selected_deps.Count() != 0)
        {
            sqlQueryData = $"INSERT INTO dbo.Photos_Departments VALUES ";
            foreach (int dep in selected_deps)
            {
                sqlQueryData = String.Concat(sqlQueryData, $"({id}, {dep}), ");

            }
            sqlQueryData = sqlQueryData.Remove(sqlQueryData.Length - 2);
            result = await Task.Run(() => photoService.SaveDataAsync(sqlQueryData));
            if (result == "OK")
            {
                notificationService.Notify(new NotificationMessage() { Severity = NotificationSeverity.Success, Summary = "Success", Detail = "Сохранение успешно завершено", Duration = 4000 });
            }
            else
            {
                notificationService.Notify(new NotificationMessage() { Severity = NotificationSeverity.Error, Summary = "Error", Detail = result, Duration = 4000 }); //huy pizda dzhigurda
            }
        }
    }

    private long maxFileSize = 3076 * 3076;
    private int maxAllowedFiles = 5;
    private bool isLoading;
    string imgurl = string.Empty;
    string filename = string.Empty;
    private async Task LoadFiles(InputFileChangeEventArgs e, PhotoModel incident)
    {
        IBrowserFile loadedFile;
        string format = "image/*";
        isLoading = true;
        try
        {
            loadedFile = e.File;
            if (!loadedFile.ContentType.Contains("image"))
            {
                notificationService.Notify(new NotificationMessage() { Severity = NotificationSeverity.Error, Summary = "Error", Detail = "Загрузите фотографию!", Duration = 4000 }); //huy pizda dzhigurda
                isLoading = false;
                return;
            }
            else
            {
                var resizedImageFile = await loadedFile.RequestImageFileAsync(format, 100, 100);
                var buffer = new byte[loadedFile.Size];
                var resized_buffer = new byte[10001];
                await resizedImageFile.OpenReadStream().ReadAsync(resized_buffer);
                await loadedFile.OpenReadStream(maxFileSize).ReadAsync(buffer);
                imgurl = $"data:{format};base64,{Convert.ToBase64String(resized_buffer)}";
                photos[incident.id - 1].comment_data = buffer;
            }
        }
        catch (Exception ex)
        {

        }


        isLoading = false;
    }

    string GetBase64(byte[] file_data)
    {
        return $"data:{0};base64,{Convert.ToBase64String(file_data)}";
    }
    async void ChangeDisable(PhotoModel incident)
    {
        switch (incident.status)
        {
            case 1:
                disable_send_incident[incident.id - 1] = false;
                disable_groups[incident.id - 1] = false;
                disable_edits[incident.id - 1] = false;
                disable_zone[incident.id - 1] = false;
                break;
            case 2:
                disable_send_incident[incident.id - 1] = true;
                disable_groups[incident.id - 1] = true;
                disable_edits[incident.id - 1] = true;
                disable_zone[incident.id - 1] = true;
                break;
            case 3:
                disable_send_incident[incident.id - 1] = false;
                disable_groups[incident.id - 1] = true;
                disable_edits[incident.id - 1] = true;
                disable_zone[incident.id - 1] = true;
                break;
            case 4:
                disable_send_incident[incident.id - 1] = true;
                disable_groups[incident.id - 1] = true;
                disable_edits[incident.id - 1] = true;
                disable_zone[incident.id - 1] = true;
                break;
            default:
                throw new ArgumentOutOfRangeException();
        }
        await InvokeAsync(StateHasChanged);
        await grid.Reload();
    }
    async void ClosedIncidents(bool isChecked)
    {
        check_incidents_2 = false;

        if (isChecked == false)
        {
            photos = await Task.Run(() => photoService.GetPhotosAsync());
            //photos = (from photo in photos where photo.status < 4 select photo).OrderBy(x => x.status).ToList();
        }
        else
        {
            photos = photos.Where(x => x.status == 4).ToList();
        }
        InvokeAsync(StateHasChanged);
        grid.Reload();
        await grid.GoToPage(0);
    }
    async void ToCloseIncidents(bool isChecked)
    {
        check_incidents = false;
        photos = await Task.Run(() => photoService.GetPhotosAsync());
        if (isChecked == true)
        {

            photos = photos.Where(x => x.status == 3).ToList();
        }
        else
        {
            photos = (from photo in photos where photo.status < 4 select photo).OrderBy(x => x.status).ToList();

        }
        InvokeAsync(StateHasChanged);
        grid.Reload();

        await grid.GoToPage(0);
    }

    void SendIncidents()
    {
        int counter = 0; 
        foreach (PhotoModel photo in photos.Where(x => x.status == 1))
        {
            if (photo.zone != "" && photo.zone != null && departments_string[photo.id - 1] != "")
            {
                ChangeIncidentStatus(photo);
                counter++;
            }
        }
        if (counter>0)
        {
            notificationService.Notify(new NotificationMessage() { Severity = NotificationSeverity.Success, Summary = "Success", Detail = $"Количество отправленных инцидентов: {counter}", Duration = 3000 });
        }
        else
            notificationService.Notify(new NotificationMessage() { Severity = NotificationSeverity.Error, Summary = "Error", Detail = "Нет инцидентов для отправки", Duration = 3000 });

    }
}


