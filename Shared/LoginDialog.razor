@page "/LoginDialog"

@using Radzen.Blazor
@using Radzen
@using System.Linq;
@using System.Web;
@using System.Security.Cryptography;
@using System.IO;
@using System.Text;
@using Microsoft.AspNetCore.Components.Web 
@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor httpContextAccessor


@inject DialogService dialogService
@inject NavigationManager NavigationManager



@using Microsoft.EntityFrameworkCore



@code {
    string Username = "";
    string Password = "";
    string result = "";
    private const int DerivationIterations = 1000;
    private const int Keysize = 128;

    Dictionary<DateTime, string> events = new Dictionary<DateTime, string>();
    [CascadingParameter] Task<AuthenticationState> authenticationStateTask { get; set; }

    protected override void OnInitialized()
    {
        dialogService.OnOpen += Open;
        dialogService.OnClose += Close;

        var authState = authenticationStateTask.Result;
        var user = authState.User;

        foreach (var claim in user.Claims)
        {
            if (claim.Type == "http://schemas.microsoft.com/ws/2008/06/identity/claims/role")
            {
                result = claim.Value;
            }
        }
        Username = user.Identity.Name;
        if (result == "PasswordReset")
        {
            //dialogService.Open<UserAccountSettings>("Установка пароля для пользователя " + Username, new Dictionary<string, object>() { { "username", Username } });
        }
        else
        {
            ShowSimpleDialog();
        }


    }

    async void Open(string title, Type type, Dictionary<string, object> parameters, DialogOptions options)
    {
        events.Add(DateTime.Now, "Dialog opened");
        await InvokeAsync(() => { StateHasChanged(); });
    }

    async void Close(dynamic result)
    {


    }

    async void logIn(LoginArgs args)
    {
        string g = NavigationManager.BaseUri;
        string s;
        if (encode(args.Password) == "")
        {
            s = g + "login?paramUsername=" + encode(args.Username) + "&paramPassword=" + encode(args.Password);
        }
        else
        {
            string pwd = string.Empty;
            do
            {
                pwd = Encrypt(args.Password, "Mmkarton123!#_");
            } while (pwd.Contains('+') || pwd.Contains('&'));

            s = g + "login?paramUsername=" + encode(args.Username) + "&paramPassword=" + pwd;
        }
        dialogService.Close(true);
        NavigationManager.NavigateTo(s, true);

        //string g = NavigationManager.BaseUri;
        //string s;
        //if (encode(@Password) == "")
        //{
        //    s = g + "login?paramUsername=" + encode(@Username) + "&paramPassword=" + encode(@Password);
        //}
        //else
        //{
        //    string pwd = string.Empty;
        //    do
        //    {
        //        pwd = Encrypt(@Password, "Mmkarton123!#_");
        //    } while (pwd.Contains('+') || pwd.Contains('&'));

        //    s = g + "login?paramUsername=" + encode(@Username) + "&paramPassword=" + pwd;
        //}
        //dialogService.Close(true);
        //NavigationManager.NavigateTo(s, true);
    }

    async Task ShowSimpleDialog() => await dialogService.OpenAsync("Login",(ds) =>
            @<RadzenCard Style="width: 100%;">
    <RadzenTemplateForm Data=@("SimpleLogin")>
        <RadzenLogin AllowRegister="false" AllowResetPassword="false" Login="(logIn)" />
    </RadzenTemplateForm>
    <b>@result</b>

</RadzenCard>
    );


    @*@<RadzenCard Style="padding: 20px;" @onkeydown="(args) => Enter(args, Password)">
    <p Style="margin-bottom: 10px;">Login</p>
    <input type="text"
           placeholder="User Name"
           @bind="@Username" />
    &nbsp;&nbsp;
        <input type="password" class="pwd"
               placeholder="Password"
               @bind="@Password" />

    &nbsp;&nbsp;

    <RadzenButton Text="Login" Click="() => logIn(true, Password)" Style="margin-bottom: 30px; width: 150px" />
    <b>@result</b>

</RadzenCard>*@

        private string encode(string param)
        {
            return HttpUtility.UrlEncode(param);
        }

        private byte[] Generate128BitsOfRandomEntropy()
        {
            var randomBytes = new byte[16];
            using (var rngCsp = new RNGCryptoServiceProvider())
            {
                rngCsp.GetBytes(randomBytes);
            }
            return randomBytes;
        }

        public string Encrypt(string plainText, string passPhrase)
        {
            try
            {
                var saltStringBytes = Generate128BitsOfRandomEntropy();
                var ivStringBytes = Generate128BitsOfRandomEntropy();
                var plainTextBytes = Encoding.UTF8.GetBytes(plainText);
                using (var password = new Rfc2898DeriveBytes(passPhrase, saltStringBytes, DerivationIterations))
                {
                    var keyBytes = password.GetBytes(Keysize / 8);
                    using (var symmetricKey = new RijndaelManaged())
                    {
                        symmetricKey.BlockSize = 128;
                        symmetricKey.Mode = CipherMode.CBC;
                        symmetricKey.Padding = PaddingMode.PKCS7;
                        using (var encryptor = symmetricKey.CreateEncryptor(keyBytes, ivStringBytes))
                        {
                            using (var memoryStream = new MemoryStream())
                            {
                                using (var cryptoStream = new CryptoStream(memoryStream, encryptor, CryptoStreamMode.Write))
                                {
                                    cryptoStream.Write(plainTextBytes, 0, plainTextBytes.Length);
                                    cryptoStream.FlushFinalBlock();
                                    var cipherTextBytes = saltStringBytes;
                                    cipherTextBytes = cipherTextBytes.Concat(ivStringBytes).ToArray();
                                    cipherTextBytes = cipherTextBytes.Concat(memoryStream.ToArray()).ToArray();
                                    memoryStream.Close();
                                    cryptoStream.Close();
                                    return Convert.ToBase64String(cipherTextBytes);
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                return null;
            }
        }
    }
